{"version":3,"sources":["components/dynamicForm/serializeHelper.js","components/dynamicField/dynamicField.jsx","components/dynamicForm/dynamicForm.jsx","App.js","serviceWorker.js","index.js"],"names":["serialize","form","serialized","i","elements","length","field","name","disabled","type","push","value","Object","toConsumableArray","selectedOptions","map","x","checked","JSON","stringify","DynamicField","props","_useReducer","useReducer","state","newState","objectSpread","_useReducer2","slicedToArray","setInputValue","onChange","event","target","undefined","defineProperty","react_default","a","createElement","className","htmlFor","id","label","aria-describedby","placeholder","required","description","definition","options","option","key","display","multiple","fieldSelector","DynamicForm","config","handleChange","console","log","concat","onSubmit","preventDefault","data","timeStamp","Date","now","parse","fields","dynamicField","assign","App","dynamicForm","configData","json","document","getElementById","innerText","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22c63824.chunk.js","sourcesContent":["export default function serialize(form) {\n\n\n    // Setup our serialized data\n    var serialized = [];\n\n    // Loop through each field in the form\n    for (var i = 0; i < form.elements.length; i++) {\n\n        var field = form.elements[i];\n\n        // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields\n        if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;\n\n        // If a multi-select, get all selections\n        if (field.type === 'select-multiple') {\n            serialized.push({name: field.name, value: [...field.selectedOptions].map(x => x.value) });\n        }\n        else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {\n            serialized.push({ name: field.name, value: field.value });\n        }\n    }\n    return JSON.stringify(serialized);\n};","import React, {useReducer} from 'react';\nimport PropTypes from 'prop-types';\n\nconst DynamicField = props => {\n    // eslint-disable-next-line\n    const [InputValue, setInputValue] = useReducer((state, newState) => ({...state, ...newState}), {});\n\n    const onChange = event => {\n        const { target, name } = event;\n\n        let value = undefined;\n        switch (target.type) {\n            case 'checkbox':\n                value = target.checked\n                break;\n            case 'select-multiple':\n                value = [...target.selectedOptions].map(x => x.value)\n                break;\n            default:\n                value = target.value;\n                break;\n        }\n        \n        setInputValue({[name]: value});\n        props.onChange(value);\n    }\n\n    const fieldSelector = props => {\n        switch (props.type) {\n            case 'text':\n            case 'date':\n            case 'datetime-local':\n            case 'time':\n            case 'number':\n            default:\n                return (\n                    <label htmlFor={props.id}>{props.label}\n                        <input\n                            name={props.id}\n                            type={props.type}\n                            onChange={onChange}\n                            className=\"form-control\"\n                            aria-describedby={props.id}\n                            placeholder={props.placeholder}\n                            required={props.required === \"true\"} />\n                        <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                    </label>\n                )\n\n            case 'checkbox': return (\n                <div className=\"form-check\">\n                    <input type=\"checkbox\" className=\"form-check-input\" name={props.id} required={props.required === \"true\"} onChange={onChange} />\n                    <label className=\"form-check-label\" htmlFor={props.id}>{props.label}</label>\n                </div>\n            )\n\n            case 'array': return (\n                <label>\n                    {props.label}\n                    <select className=\"form-control\" name={props.id} required={props.required === \"true\"} onChange={onChange}>\n                        <option value=\"0\"></option>\n                        {props.definition.options.map((option, i) => {\n                            return <option key={i} value={option.id}>{option.display}</option>\n                        })}\n                    </select>\n                    <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                </label>\n            )\n\n            case 'multi-array': return (\n                <label>\n                    {props.label}\n                    <select multiple={true} className=\"form-control\" required={props.required === \"true\"} name={props.id} onChange={onChange}>\n                        {props.definition.options.map((option, i) => {\n                            return <option key={i} value={option.id}>{option.display}</option>\n                        })}\n                    </select>\n                    <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                </label>\n            )\n        }\n    }\n\n    return (\n        <div className=\"form-group\">\n            {fieldSelector(props)}\n        </div>\n    )\n}\n\nDynamicField.propTypes = {\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    definition: PropTypes.object,\n    required: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    label: PropTypes.string.isRequired,\n    placeHolder: PropTypes.string\n};\n\nexport default DynamicField;\n","import React from 'react';\nimport serialize from './serializeHelper';\nimport DynamicField from '../dynamicField/dynamicField';\nimport '../../config/style.css';\n\nconst DynamicForm = props => {\n\n    const { config } = props;\n\n    const handleChange = value => {\n        console.log(`handleChange: ${value}`)\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        let data = {\n            timeStamp: Date.now(),\n            data: JSON.parse(serialize(event.target))\n        }\n        props.onSubmit(data);\n    }\n\n    return (\n        <div className=\"card mx-auto mt-5\">\n            <div className=\"card-header\">{config.name}</div>\n            <div className=\"card-body\">\n                <form onSubmit={handleSubmit} name={config.name}>\n\n                    {config.fields.map((field, i) => {\n                        return <DynamicField key={i} {...field} onChange={handleChange} />\n                    })}\n\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default DynamicForm;\n","import React from 'react';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport configData from './config/complete.json';\n\nconst App = () => {\n\n    const submitHandler = event => {\n        let json = JSON.stringify(event, null, 4);\n        console.log(json);\n        document.getElementById('result').innerText = json;\n    }\n\n    return (\n        <div className=\"container\">\n\n            <DynamicForm config={configData} onSubmit={submitHandler} />\n\n            <div className=\"card mx-auto mt-5\">\n                <div className=\"card-header\">Output</div>\n                <div className=\"card-body\">\n                    <pre id=\"result\">Press Submit to see the output...</pre>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}